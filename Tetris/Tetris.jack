class Tetris
{
    // Fields
    field Array grid;
    field Array activeBlockXPositions;
    field Array activeBlockYPositions;
    
    field int gridHeight;
    field int gridWidth;
    field int activePieces;
    field int invalidPosition;
    field int blockWidth;
    field int blockHeight;
    field boolean hasActive;
    field boolean flipBlock;

    // Constructor
    constructor Tetris new()
    {
        let gridHeight = 20;
        let gridWidth = 10;
        let activePieces = 4;
        let invalidPosition = -1;
        let blockWidth = 20;
        let blockHeight = 10;
        let hasActive = false;
        let flipBlock = false;
        
        let grid = Array.new(gridHeight);
        let activeBlockXPositions = Array.new(activePieces);
        let activeBlockYPositions = Array.new(activePieces);
    
        return this;
    }
    
    // Methods
    
    // Method used to delete allocated object resources
    method void dispose()
    {
        var Array inner;
        var int index;
        let index = 0;
        
        while(index < gridHeight)
        {
            let inner = grid[index];
            
            do inner.dispose();
            
            let index = index + 1;
        }
        
        do grid.dispose();
        do Memory.deAlloc(this);
        
        return;
    }
    
    // Primary game method that drives the tetris game
    method void start()
    {
        var Array inner;
        var char playerInput, gravityDirection;
        var boolean ongoing, restart;
        var int tick, target, waitDuration, cooldown;
        
        let restart = true;
        let ongoing = true;
        let tick = 0;
        let target = 10;
        let waitDuration = 100;
        let gravityDirection = 133;
        let cooldown = 3000;
        
        // Outer game loop that restarts the game
        while(restart)
        {
            do initializeGrid();
            do initializeActiveBlocks();
            
            let ongoing = true;
            let tick = 0;
            
            // Inner game loop that drives the current game
            while(ongoing)
            {
                let playerInput = Keyboard.keyPressed();
                
                do moveActiveBlocks(playerInput);
                
                let tick = tick + 1;
                
                if(tick > target)
                {
                    if(~hasActive)
                    {
                        do generateBlocks();
                    }
                
                    let hasActive = moveActiveBlocks(gravityDirection);
                
                    if(~hasActive)
                    {
                        do deactivateBlocks();
                    }
                
                    let ongoing = checkConditions();
                
                    let tick = 1;
                }
                
                do updateScreen();
                do Sys.wait(waitDuration);
            }
            
            do Sys.wait(cooldown);
        }
        
        return;
    }
    
    // Converts active blocks into deactivated blocks inside grid
    method void deactivateBlocks()
    {
        var Array inner;
        var int index;
        
        let index = 0;
        
        while(index < activePieces)
        {
            let inner = grid[activeBlockYPositions[index]];
            let inner[activeBlockXPositions[index]] = true;
            let index = index + 1;
        }
    
        return;
    }
    
    // Checks to see if the player has lost or if a
    // line of blocks has been completed.
    // If a line of blocks has been completed, removes that line and
    // drops all blocks down.
    // The player has lost if the top of the grid contains deactivated blocks.
    method boolean checkConditions()
    {
        var Array inner;
        var int currentBlocks, index, kndex;
        
        let currentBlocks = 0;
        let index = 0;
        let kndex = 0;
        
        // check for complete lines
        while(index < gridHeight)
        {
            let inner = grid[index];
        
            while(kndex < gridWidth)
            {
                if(inner[kndex])
                {
                    let currentBlocks = currentBlocks + 1;
                }
                
                let kndex = kndex + 1;
            }
            
            if(currentBlocks=gridWidth)
            {
                do clearLine(index);
            }
            
            let currentBlocks = 0;
            let kndex = 0;
            let index = index + 1;
        }
        
        let index = 0;
        let inner = grid[0];
        
        // check for loss condition
        while(kndex < gridWidth)
        {
            if(inner[kndex])
            {
                return false;
            }
            
            let kndex = kndex + 1;
        }
        
        return true;
    }
    
    // Clears the grid starting at index and decrementing index toward
    // the visual top of the grid
    method void clearLine(int index)
    {
        var Array inner, aboveInner;
        var int kndex;
    
        while(index > -1)
        {
            let kndex = 0;
        
            if(index=0)
            {
                let inner = grid[index];
            
                while(kndex < gridWidth)
                {
                    let inner[kndex] = false;
                    
                    let kndex = kndex + 1;
                }
            }
            else
            {
                let inner = grid[index];
                let aboveInner = grid[(index - 1)];
                
                while(kndex < gridWidth)
                {
                    let inner[kndex] = aboveInner[kndex];
                    
                    let kndex = kndex + 1;
                }
            }
            
            let index = index - 1;
        }
        
        return;
    }
    
    // Determines if active blocks can move in a given direction
    method boolean canMove(char direction)
    {
        var Array inner;
        var int index;
        
        let index = 0;
        
        if(direction=130) // left
        {
            while(index < activePieces)
            {
                if(activeBlockXPositions[index] > 0 & activeBlockXPositions[index] < gridWidth & activeBlockYPositions[index] > -1 & activeBlockYPositions[index] < gridHeight)
                {
                    let inner = grid[activeBlockYPositions[index]];
                    
                    if(inner[activeBlockXPositions[index] - 1])
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            
                let index = index + 1;
            }
            
            return true;
        }
        if(direction=131) // up
        {
            return false;
        }
        if(direction=132) // right
        {
            while(index < activePieces)
            {
                if((activeBlockXPositions[index] > -1) & (activeBlockXPositions[index] < (gridWidth - 1)) & (activeBlockYPositions[index] > -1) & (activeBlockYPositions[index] < gridHeight))
                {
                    let inner = grid[activeBlockYPositions[index]];
                    
                    if(inner[activeBlockXPositions[index] + 1])
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            
                let index = index + 1;
            }
            
            return true;
        }
        if(direction=133) // down
        {
            while(index < activePieces)
            {
                if(activeBlockXPositions[index] > -1 & activeBlockXPositions[index] < gridWidth & activeBlockYPositions[index] > -1 & activeBlockYPositions[index] < (gridHeight - 1))
                {
                    let inner = grid[activeBlockYPositions[index] + 1];
                    
                    if(inner[activeBlockXPositions[index]])
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            
                let index = index + 1;
            }
            
            return true;
        }
        
        return false;
    }
    
    // Checks to see if active blocks can move in a given direction via canMove method
    // then moves in the direction if true
    // Also handles halting the program via the escape key
    method boolean moveActiveBlocks(char direction)
    {
        // left arrow (130), up arrow (131), right arrow (132), down arrow (133)
        // move left, rotate blocks, move right, move down
        
        var int index;
        let index = 0;
        
        if(canMove(direction)=true)
        {
            if(direction=130)
            {
                while(index < activePieces)
                {
                    let activeBlockXPositions[index] = activeBlockXPositions[index] - 1;
                    
                    let index = index + 1;
                }
                
                return true;
            }
            if(direction=131)
            {
                
            }
            if(direction=132)
            {
                while(index < activePieces)
                {
                    let activeBlockXPositions[index] = activeBlockXPositions[index] + 1;
                    
                    let index = index + 1;
                }
                
                return true;
            }
            if(direction=133)
            {
                while(index < activePieces)
                {
                    let activeBlockYPositions[index] = activeBlockYPositions[index] + 1;
                    
                    let index = index + 1;
                }
                
                return true;
            }
        }
        
        if(direction=140) // ESC (140)
        {
            do Sys.halt();
            
            return false;
        }
    
        return false;
    }
    
    // Alternates between generating horizontal and vertical active blocks
    method void generateBlocks()
    {
        var int index;
        let index = 0;
        let hasActive = true;
        
        if(flipBlock)
        {
            while(index < activePieces)
            {
                let activeBlockXPositions[index] = 0;
                let activeBlockYPositions[index] = index;
                
                let index = index + 1;
            }
        }
        else
        {
            while(index < activePieces)
            {
                let activeBlockXPositions[index] = index;
                let activeBlockYPositions[index] = 0;
                
                let index = index + 1;
            }
        }
        
        let flipBlock = ~flipBlock;
        
        return;
    }
    
    // Updates the screen by clearing it then drawing any active
    // or deactivated blocks
    method void updateScreen()
    {
        var Array inner;
        var int yndex, xndex;
        
        let yndex = 0;
        let xndex = 0;
    
        do Screen.clearScreen();
        do Screen.setColor(true);
        
        while(yndex < gridHeight)
        {
            let inner = grid[yndex];
        
            while(xndex < gridWidth)
            {
                if(inner[xndex])
                {
                    do Screen.drawRectangle((xndex * blockWidth) + 4, (yndex * blockHeight) + 2, (xndex + 1) * blockWidth, (yndex + 1)* blockHeight );
                }
                
                let xndex = xndex + 1;
            }
            
            let xndex = 0;
            let yndex = yndex + 1;
        }
        
        while(xndex < activePieces)
        {
            if ((activeBlockXPositions[xndex] > invalidPosition) & (activeBlockYPositions[xndex] > invalidPosition))
            {
                do Screen.drawRectangle((activeBlockXPositions[xndex] * blockWidth) + 4, (activeBlockYPositions[xndex] * blockHeight) + 2, (activeBlockXPositions[xndex] + 1) * blockWidth, (activeBlockYPositions[xndex] + 1) * blockHeight);
            }
        
            let xndex = xndex + 1;
        }
    
        return;
    }
    
    // Initializes active blocks elements with invalid positions to
    // prepare for the generateBlocks method to be called
    method void initializeActiveBlocks()
    {
        var int index;
        let index = 0;
        
        while(index < activePieces)
        {
            let activeBlockXPositions[index] = invalidPosition;
            let activeBlockYPositions[index] = invalidPosition;
            let index = index + 1;
        }
    
        return;
    }
    
    // Initializes grid elements with boolean arrays
    // Causes grid to become a 2 dimensional boolean[20][10] array
    method void initializeGrid()
    {
        var Array inner;
        var int index, kndex;
        let index = 0;
        
        while(index < gridHeight)
        {
            let kndex = 0;
            let inner = Array.new(gridWidth);
            
            while(kndex < gridWidth)
            {
                let inner[kndex] = false;
                
                let kndex = kndex + 1;
            }
            
            let grid[index] = inner;
            let index = index + 1;
        }
        
        return;
    }
}