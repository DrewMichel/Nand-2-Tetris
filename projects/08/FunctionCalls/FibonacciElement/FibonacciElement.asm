@256
D=A
@SP
M=D
@Sys.initlunchbreak1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.initlunchbreak1)
// 1: function Main.fibonacci 0
(Main.fibonacci)
// 2: push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// 3: push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// 4: lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@lt1
D;JLT
@SP
A=M
M=0
@END_OF_OPERATION1
0;JMP
(lt1)
@SP
A=M
M=-1
(END_OF_OPERATION1)
@SP
M=M+1
// 5: if-goto IF_TRUE
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
// 6: goto IF_FALSE
@IF_FALSE
0;JMP
// 7: label IF_TRUE
(IF_TRUE)
// 8: push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// 9: return
@LCL
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
@0
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R14
A=M-D
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@R15
A=M
0;JMP
// 10: label IF_FALSE
(IF_FALSE)
// 11: push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// 12: push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// 13: sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// 14: call Main.fibonacci 1
@Main.fibonaccilunchbreak2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonaccilunchbreak2)
// 15: push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// 16: push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// 17: sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// 18: call Main.fibonacci 1
@Main.fibonaccilunchbreak3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonaccilunchbreak3)
// 19: add
@SP
AM=M-1
D=M
A=A-1
M=D+M
// 20: return
@LCL
D=M
@R14
M=D
@5
A=D-A
D=M
@R15
M=D
@0
D=A
@ARG
A=D+M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R14
A=M-D
D=M
@THAT
M=D
@2
D=A
@R14
A=M-D
D=M
@THIS
M=D
@3
D=A
@R14
A=M-D
D=M
@ARG
M=D
@4
D=A
@R14
A=M-D
D=M
@LCL
M=D
@R15
A=M
0;JMP
// 21: function Sys.init 0
(Sys.init)
// 22: push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// 23: call Main.fibonacci 1
@Main.fibonaccilunchbreak4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonaccilunchbreak4)
// 24: label WHILE
(WHILE)
// 25: goto WHILE
@WHILE
0;JMP
