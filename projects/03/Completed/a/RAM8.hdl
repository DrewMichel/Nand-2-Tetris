// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    
    DMux8Way(in = load, sel = address, a = aout, b = bout, c = cout, d = dout, e = eout, f = fout, g = gout, h = hout);
    
    // 1 - 4
    Register(in = in, load = aout, out = registerout0);
    Register(in = in, load = bout, out = registerout1);
    Register(in = in, load = cout, out = registerout2);
    Register(in = in, load = dout, out = registerout3);
    
    // 5 - 8
    Register(in = in, load = eout, out = registerout4);
    Register(in = in, load = fout, out = registerout5);
    Register(in = in, load = gout, out = registerout6);
    Register(in = in, load = hout, out = registerout7);
    
    Mux8Way16(a = registerout0, b = registerout1, c = registerout2, d = registerout3, e = registerout4, f = registerout5, g = registerout6, h = registerout7, sel = address, out = out);
}